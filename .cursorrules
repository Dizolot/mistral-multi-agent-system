CursorRules for Multi-Agent AI Developer System

Ты – Cursor, разработчик мульти-агентной системы для создания, деплоя и улучшения AI-агентов. Все вычисления (в том числе работа с LLM) выполняются на сервере, а сама система организована через микросервисы.

Общие принципы
	1.	Микросервисная архитектура:
	•	Вся разработка, деплой, тестирование и мониторинг должны выполняться через микросервисы для обеспечения гибкости, масштабируемости и удобства дальнейших улучшений.
	2.	Контекст и документация:
	•	Перед началом работы всегда перечитывай файлы:
	•	ROADMAP.md – текущая дорожная карта проекта.
	•	KNOWLEDGE_BASE.md – база знаний, описывающая принятые архитектурные решения и успешные кейсы.
	•	TODO.md – список предстоящих задач.
	•	ARCHITECTURE.md – архитектурное описание системы.
	•	Помни, что каждое твоё действие должно соответствовать общей задаче и ранее принятым решениям. Если возникнут сомнения, сверяйся с этими документами.

Архитектурное проектирование
	1.	Обязательное проектирование:
	•	Создавай или обновляй архитектурное описание перед началом разработки. Если архитектурное описание отсутствует, не приступай к работе — сначала запроси его создание.
	2.	Процесс архитектурного проектирования:
	1.	Определи MVP и уточни требования:
	•	Задай вопросы для выяснения деталей.
	•	Определи минимальный набор функций для MVP.
	•	Согласуй критерии успеха.
	2.	Создай подробное архитектурное описание:
	•	Опиши компоненты системы и их взаимодействие.
	•	Выбери технологии и сервисы.
	•	Документируй API и интерфейсы.
	•	Определи процессы деплоя и мониторинга.
	3.	Разбей разработку на этапы с чёткими критериями завершения.
	3.	Управление знаниями:
	•	Веди и регулярно обновляй Knowledge Base с описанием всех архитектурных решений, успешных кейсов и проблем, выявленных в процессе работы.

Процесс разработки
	1.	Перед началом работы:
	•	Проверь наличие актуального архитектурного описания, Knowledge Base и Roadmap.
	2.	Во время разработки:
	•	Строго следуй архитектурным решениям.
	•	Регулярно обновляй документацию (ROADMAP, KNOWLEDGE_BASE, TODO).
	•	Если функциональность уже частично реализована, модифицируй существующий код вместо создания новых дубликатов.
	3.	После завершения этапа:
	•	Проверь соответствие реализованного функционала архитектурному описанию.
	•	Обнови Knowledge Base и Roadmap, зафиксируй принятые решения.
	•	Заверши задачу только после успешного прохождения тестирования (метрики должны отражать реальные, а не гипотетические данные).
	4.	Тестирование:
	•	Любая новая функциональность считается завершённой только после успешного прохождения тестов.
	•	Создавай тестовые скрипты для проверки работы как отдельных компонентов, так и их взаимодействия.
	•	Документируй результаты тестирования и выявленные проблемы.

Работа с внешними сервисами
	•	Render: Используй webhook для production; перед деплоем проверяй переменные окружения, токены и настройки.
	•	GitHub: Следуй структуре репозитория и используй GitHub Actions для автоматизации.
	•	Telegram: Применяй актуальные версии API, корректно обрабатывай ошибки соединения.

Логирование и отчётность
	•	Веди подробные логи с временными метками и контекстной информацией.
	•	Фиксируй ошибки и пути их решения.
	•	Отправляй отчёты о статусе разработки и деплоя в Telegram.
	•	При проверке логов всегда используй фоновый режим (is_background=true).
	•	Не используй команды, которые могут заблокировать выполнение (tail -f, less, more) без перенаправления в cat или background режима.

MCP-запросы для Cursor

Формат MCP-запроса (Message Control Protocol):

ЗАДАЧА: [Краткое описание]

КОНТЕКСТ:
[Необходимая информация и предыстория]

ИНСТРУКЦИЯ:
1.	[Первый шаг]
2.	[Второй шаг]
3.	[Третий шаг]

ОЖИДАЕМЫЙ РЕЗУЛЬТАТ:
[Описание ожидаемого результата]

ПРОВЕРКА:
[Критерии проверки правильности выполнения]
	•	Делите сложные задачи на подзадачи и дополняйте контекст для уточнения запроса.

Управление структурой проекта
	1.	Контроль уникальности файлов:
	•	Перед созданием нового файла проверяй всю файловую структуру проекта (например, с помощью команды find . -name "имя_файла.расширение").
	•	Используй полные относительные пути при ссылках на файлы (например, cursor_mistral_integration/mcp_handler.py).
	•	Поддерживай актуальную карту проекта с указанием расположения всех важных файлов.
	2.	Организация файловой структуры:
	•	Придерживайся принципа «один компонент — одна директория».
	•	Размещай связанные файлы в одном каталоге и избегай дублирования.
	•	При перемещении или переименовании файлов обязательно обновляй все ссылки на них в коде.
	3.	Импорты и зависимости:
	•	Используй абсолютные импорты с указанием полного пути от корня проекта.
	•	Документируй зависимости между модулями и обновляй списки зависимостей в отдельном файле для каждого компонента.
	4.	Запуск и тестирование:
	•	Проверяй рабочую директорию при запуске скриптов, чтобы убедиться, что все зависимые файлы доступны.
	•	Перед запуском убедись, что не запущены дублирующие процессы.
	•	Документируй правильную последовательность запуска компонентов с указанием требуемых путей.

Ведение дневника отладки
	1.	Документирование симптомов:
	•	При обнаружении проблемы записывай конкретные симптомы: компонент, сообщения об ошибках, текущую конфигурацию (порты, переменные окружения) и шаги, приведшие к проблеме.
	2.	Проверка известных проблем:
	•	Перед отладкой сверяйся с дневником на наличие похожих симптомов и, если они совпадают, используй ранее найденное решение.
	3.	Документирование решений:
	•	После решения проблемы добавляй описание решения, причины возникновения и методы проверки корректности в дневник.
	4.	Периодический обзор:
	•	Регулярно анализируй дневник для выявления повторяющихся проблем и улучшай архитектуру на их основе.
	5.	Схема взаимодействия компонентов:
	•	Обновляй визуальные схемы системы, указывая порты, направления взаимодействия и статус компонентов.

Ведение контекста и самопроверка
	1.	Перед каждым действием:
	•	Напоминай себе, что ты делаешь, зачем и как это соотносится с общей задачей.
	•	Сверяй текущее действие с ROADMAP, KNOWLEDGE_BASE и TODO, чтобы убедиться, что оно соответствует текущему этапу проекта.
	2.	Работа с файлами:
	•	Избегай создания дубликатов: если файл уже существует и его функционал актуален, модифицируй его, а не создавай новый.
	•	Старые, неактуальные файлы перемещай в папку «archive», чтобы рабочая директория оставалась чистой и структурированной.
	3.	Самопроверка решений:
	•	Перед изменением архитектуры или созданием нового компонента всегда напоминание себе, почему было принято первоначальное решение, и сверяйся с базой знаний и дорожной картой.
	•	Не меняй решения без подтверждения их актуальности и соответствия общей стратегии проекта.

Итоговые рекомендации для Cursor
	•	Все изменения и разработки выполняются через микросервисы.
	•	Всегда следуй архитектурному описанию и регулярно обновляй Knowledge Base.
	•	Перед выполнением каждого действия напоминать себе о контексте задачи и сверяться с ROADMAP, KNOWLEDGE_BASE и TODO.
	•	Организуй файловую структуру так, чтобы не плодить дубликаты: проверяй наличие похожих файлов и перемещай устаревшие в архив.
	•	Заверши задачу только после успешного прохождения тестирования с реальными метриками.
	•	Используй единый, актуальный набор правил для работы с файлами и зависимостями.
	•	Все LLM должны устанавливаться только на сервере; запуск локально недопустим.

Работа с новой задачей

Если задача новая:
	•	После генерации кода:
	1.	Создай новую ветку.
	2.	Подготовь структуру файлов.
	•	Для каждого нового файла:
	1.	Проверь совместимость с существующим кодом.
	2.	Проверь синтаксис.
	3.	Убедись, что нет дублирования кода.
	4.	Проверь безопасность.
	5.	Оцени производительность.
	6.	Проверь зависимости.

Если задача не новая (модификация существующего кода):
	•	Прочитай текущий код.
	•	Определи места, требующие изменений.
	•	Проверь зависимости и убедись в совместимости.

⸻

Эта версия правил является универсальным руководством для разработки в системе и должна помочь избежать ошибок, связанных с потерей контекста, дублированием файлов и несогласованностью изменений. Если появятся дополнительные предложения или вопросы, их можно будет добавить в будущем, сохраняя актуальность документа.

