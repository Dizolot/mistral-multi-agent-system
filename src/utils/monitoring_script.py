#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ Mistral API

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Mistral
2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
4. –í–µ–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏–π
"""

import os
import sys
import time
import json
import logging
import requests
import subprocess
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = Path('logs')
log_dir.mkdir(exist_ok=True)
log_file = log_dir / 'api_monitoring.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger('api_monitor')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'api_url': 'http://139.59.241.176:8080',
    'health_endpoint': '/health',  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    'test_endpoint': '/v1/chat/completions',  # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    'check_interval': 60,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    'max_restart_attempts': 3,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    'restart_command': 'ssh root@139.59.241.176 "systemctl restart llama-server.service"',  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    'telegram_bot_token': '7835434491:AAEFMJLLKuSJzPkwKsDtcJ7q5BjzgsqNiQw',  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    'telegram_chat_id': '123456789',  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    'alert_threshold': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

# –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥
consecutive_failures = 0
restart_attempts = 0

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    global consecutive_failures
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø–æ –∞–¥—Ä–µ—Å—É {CONFIG['api_url']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ health endpoint, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if CONFIG['health_endpoint']:
        try:
            health_url = f"{CONFIG['api_url']}{CONFIG['health_endpoint']}"
            response = requests.get(health_url, timeout=10)
            if response.status_code == 200:
                logger.info(f"API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ health endpoint. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                consecutive_failures = 0
                return True
            else:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ health endpoint. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ health endpoint: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        test_url = f"{CONFIG['api_url']}{CONFIG['test_endpoint']}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        response = requests.options(test_url, timeout=10)
        if response.status_code < 500:  # –õ—é–±–æ–π –æ—Ç–≤–µ—Ç, –∫—Ä–æ–º–µ 5xx
            logger.info(f"API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ test endpoint. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            consecutive_failures = 0
            return True
        else:
            logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ test endpoint. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            consecutive_failures += 1
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ test endpoint: {e}")
        consecutive_failures += 1
    
    logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_failures}")
    return False

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    global restart_attempts
    
    if restart_attempts >= CONFIG['max_restart_attempts']:
        logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ({CONFIG['max_restart_attempts']})")
        send_telegram_notification(
            f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–µ—Ä Mistral API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {CONFIG['max_restart_attempts']} –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. "
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
        )
        return False
    
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_attempts + 1}/{CONFIG['max_restart_attempts']})")
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        result = subprocess.run(
            CONFIG['restart_command'], 
            shell=True, 
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            logger.info(f"–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–≤–æ–¥: {result.stdout}")
            restart_attempts += 1
            # –î–∞–µ–º —Å–µ—Ä–≤–∏—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(10)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞. –ö–æ–¥: {result.returncode}, –û—à–∏–±–∫–∞: {result.stderr}")
            restart_attempts += 1
            return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        restart_attempts += 1
        return False

def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    
    url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/sendMessage"
    
    payload = {
        'chat_id': CONFIG['telegram_chat_id'],
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

def run_monitoring():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global consecutive_failures, restart_attempts
    
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API")
    
    while True:
        api_available = check_api_health()
        
        if not api_available:
            if consecutive_failures >= CONFIG['alert_threshold']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
                send_telegram_notification(
                    f"üî¥ –í–ù–ò–ú–ê–ù–ò–ï: –°–µ—Ä–≤–µ—Ä Mistral API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! "
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_failures}. "
                    f"–ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å..."
                )
                
                restart_success = restart_service()
                
                if restart_success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    time.sleep(10)  # –î–∞–µ–º —Å–µ—Ä–≤–∏—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
                    if check_api_health():
                        send_telegram_notification(
                            f"üü¢ –°–µ—Ä–≤–µ—Ä Mistral API —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!"
                        )
                        consecutive_failures = 0
                        restart_attempts = 0
        else:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —Å–±–æ–µ–≤ API —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
            if consecutive_failures > 0:
                logger.info(f"API —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {consecutive_failures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
                consecutive_failures = 0
                
                if restart_attempts > 0:
                    send_telegram_notification(
                        f"üü¢ –°–µ—Ä–≤–µ—Ä Mistral API —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {restart_attempts} –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!"
                    )
                    restart_attempts = 0
        
        time.sleep(CONFIG['check_interval'])

if __name__ == "__main__":
    try:
        run_monitoring()
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        send_telegram_notification(
            f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Å–∫—Ä–∏–ø—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API: {e}"
        ) 