"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º 
–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
"""

import logging
import aiohttp
import asyncio
import requests
import time
from typing import Dict, Any, Optional, Callable, Awaitable
from multi_agent_system.async_utils import run_async_safely

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class OrchestratorAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º
    –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = None
        self.logger = logging.getLogger(__name__)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º URL: {base_url}")
    
    async def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
        """
        if self.session is None:
            self.session = aiohttp.ClientSession()
            logger.info("–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤")
        return True
    
    def initialize_sync(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.base_url}")
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                logger.info("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.error(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    async def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
        """
        if self.session:
            await self.session.close()
            self.session = None
            logger.info("–°–µ—Å—Å–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def process_message(self, user_id: str, message_text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        if not self.session:
            self.session = aiohttp.ClientSession()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            async with self.session.post(
                f"{self.base_url}/process",
                json={
                    "user_id": user_id,
                    "text": message_text,
                    "session_id": f"telegram_{user_id}"
                },
                timeout=aiohttp.ClientTimeout(total=180)  # 3 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get("content", "–û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                else:
                    error_text = await response.text()
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {error_text}")
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_text}"
                    
        except asyncio.TimeoutError:
            self.logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except aiohttp.ClientError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        
# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ mistral_client
# –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
class FallbackHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é –≤ —Å–ª—É—á–∞–µ,
    –µ—Å–ª–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    
    def __init__(self, mistral_client):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        
        Args:
            mistral_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é Mistral
        """
        self.mistral_client = mistral_client
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é")
    
    async def process_message(self, user_id: str, message_text: str, status_callback: Optional[Callable[[str], Awaitable[None]]] = None) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å.
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            status_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        """
        logger.info(f"–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å")
        
        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        start_time = time.time()
        status_update_interval = 10  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞
        last_status_update = start_time
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (10 –º–∏–Ω—É—Ç)
        max_execution_time = 600
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_updater_task = None
        
        if status_callback:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            await status_callback("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            async def update_status():
                nonlocal last_status_update
                elapsed_time = 0
                
                while True:
                    current_time = time.time()
                    elapsed_time = int(current_time - start_time)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    if elapsed_time > max_execution_time:
                        logger.warning(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (> {max_execution_time} —Å–µ–∫)")
                        await status_callback(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ({elapsed_time} —Å–µ–∫)... –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.")
                        await asyncio.sleep(10)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–µ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏
                        continue
                        
                    if current_time - last_status_update >= status_update_interval:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        await status_callback(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏... ({elapsed_time} —Å–µ–∫)")
                        last_status_update = current_time
                    
                    await asyncio.sleep(1)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_updater_task = asyncio.create_task(update_status())
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if status_callback:
                await status_callback(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            request_task = asyncio.create_task(
                self.mistral_client.generate_response(message_text)
            )
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            try:
                response = await asyncio.wait_for(request_task, timeout=max_execution_time)
                
                if status_callback:
                    await status_callback(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                    
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return response
                
            except asyncio.TimeoutError:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ({max_execution_time} —Å–µ–∫)")
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                if not request_task.done():
                    request_task.cancel()
                    try:
                        await request_task
                    except asyncio.CancelledError:
                        pass
                return f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–±–æ–ª–µ–µ {max_execution_time} —Å–µ–∫) –∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if status_updater_task:
                status_updater_task.cancel()
                try:
                    await status_updater_task
                except asyncio.CancelledError:
                    pass  # –æ–∂–∏–¥–∞–µ–º–∞—è –æ—Ç–º–µ–Ω–∞ 