"""
Агент для программирования, специализирующийся на запросах, связанных с кодом,
алгоритмами, программированием и разработкой программного обеспечения.
"""
import logging
from typing import Dict, List, Any, Optional

# Импорты из LangChain
from langchain_core.language_models import BaseLLM

# Локальные импорты
from multi_agent_system.agents.base_agent import LangChainAgent
from multi_agent_system.logger import get_logger

# Настройка логгера
logger = get_logger(__name__)

class ProgrammingAgent(LangChainAgent):
    """
    Агент для программирования, специализирующийся на запросах, связанных с кодом и разработкой.
    """
    
    def __init__(
        self, 
        llm: Optional[BaseLLM] = None,
        mistral_api_url: str = "http://localhost:8080/completion",
        tools: Optional[List[Any]] = None,
        system_prompt: Optional[str] = None
    ):
        """
        Инициализация агента для программирования.
        
        Args:
            llm: Модель языка для агента (если None, будет использоваться API Mistral)
            mistral_api_url: URL для API Mistral
            tools: Список инструментов, доступных агенту
            system_prompt: Системный промпт для агента
        """
        # Имя и описание для агента программирования
        name = "Programming Assistant"
        description = (
            "Я специализированный агент для программирования, способный помогать с вопросами о коде, "
            "алгоритмах, языках программирования, фреймворках и инструментах разработки. "
            "Я могу объяснять концепции программирования, помогать с отладкой, "
            "оптимизацией и написанием кода, а также давать рекомендации по лучшим практикам "
            "и архитектурным решениям."
        )
        
        # Системный промпт по умолчанию для агента программирования
        default_system_prompt = (
            "Ты — опытный программист и эксперт в области разработки программного обеспечения. "
            "Твоя задача — помогать пользователям с вопросами, связанными с программированием, "
            "включая написание, отладку и оптимизацию кода, объяснение концепций и алгоритмов, "
            "а также рекомендации по лучшим практикам и технологиям.\n\n"
            
            "При ответе на вопросы о коде:\n"
            "1. Предоставляй рабочий, оптимизированный и хорошо документированный код\n"
            "2. Объясняй логику и подход к решению\n"
            "3. Обращай внимание на потенциальные ошибки, крайние случаи и оптимизации\n"
            "4. Используй современные подходы и библиотеки\n"
            "5. Форматируй код с использованием соответствующих блоков и синтаксиса\n\n"
            
            "Если у тебя не хватает информации для полного ответа, запроси дополнительные детали. "
            "Если вопрос выходит за рамки программирования, укажи, что это не твоя специализация, "
            "и предложи обратиться к соответствующему эксперту."
        )
        
        # Используем предоставленный системный промпт или промпт по умолчанию
        system_prompt = system_prompt or default_system_prompt
        
        # Инициализируем базовый класс
        super().__init__(
            name=name,
            description=description,
            llm=llm,
            tools=tools,
            system_prompt=system_prompt,
            mistral_api_url=mistral_api_url
        )
        
        logger.info("Агент программирования инициализирован")
    
    def process(self, user_input: str, chat_history: List[Any] = None) -> Dict[str, Any]:
        """
        Обрабатывает запрос пользователя, связанный с программированием.
        
        Args:
            user_input: Запрос пользователя
            chat_history: История чата (опционально)
        
        Returns:
            Dict: Результат обработки запроса
        """
        # Вызываем метод базового класса для обработки запроса
        result = super().process(user_input, chat_history)
        
        # Логируем обработку запроса
        logger.info(f"Агент программирования обработал запрос: '{user_input[:50]}...' (если длинный)")
        
        return result 