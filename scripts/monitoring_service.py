#!/usr/bin/env python3

import os
import time
import requests
import logging
import subprocess
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
log_dir = os.getenv('LOG_DIR', os.path.join(project_root, 'logs'))
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'{log_dir}/monitoring.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('api_monitor')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MISTRAL_API_URL = os.getenv('MISTRAL_API_URL', 'http://139.59.241.176:8080')
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '60'))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
HEALTH_CHECK_ENDPOINT = '/v1/models'  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç
RETRY_ATTEMPTS = int(os.getenv('RETRY_ATTEMPTS', '3'))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
RESTART_SCRIPT = os.getenv('RESTART_SCRIPT', os.path.join(script_dir, 'restart_mistral_api.sh'))
RESTART_COOLDOWN = int(os.getenv('RESTART_COOLDOWN', '300'))  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏
MAX_RESTARTS_PER_DAY = int(os.getenv('MAX_RESTARTS_PER_DAY', '5'))  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
NOTIFICATION_ENABLED = TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring_state = {
    'last_restart_time': None,
    'restart_count': 0,
    'restart_dates': [],
    'last_status': True,
    'consecutive_failures': 0,
    'total_checks': 0,
    'uptime_checks': 0
}

def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    if not NOTIFICATION_ENABLED:
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
        return

    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, data=data)
        if response.status_code == 200:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mistral API"""
    try:
        start_time = time.time()
        response = requests.get(f"{MISTRAL_API_URL}{HEALTH_CHECK_ENDPOINT}", timeout=10)
        response_time = time.time() - start_time
        
        monitoring_state['total_checks'] += 1
        
        if response.status_code == 200:
            models_info = response.json()
            model_count = len(models_info.get('data', []))
            logger.info(f"Mistral API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–æ {model_count} –º–æ–¥–µ–ª–µ–π, "
                       f"–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫")
            
            monitoring_state['consecutive_failures'] = 0
            monitoring_state['uptime_checks'] += 1
            
            # –ï—Å–ª–∏ API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —Å–±–æ—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if not monitoring_state['last_status']:
                uptime_percentage = (monitoring_state['uptime_checks'] / monitoring_state['total_checks']) * 100
                message = (f"‚úÖ *Mistral API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n"
                          f"API —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {MISTRAL_API_URL}\n"
                          f"–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {model_count}\n"
                          f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫\n"
                          f"–ê–ø—Ç–∞–π–º: {uptime_percentage:.1f}%")
                send_telegram_notification(message)
            
            monitoring_state['last_status'] = True
            return True
        else:
            logger.error(f"Mistral API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            monitoring_state['consecutive_failures'] += 1
            monitoring_state['last_status'] = False
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Mistral API: {e}")
        monitoring_state['consecutive_failures'] += 1
        monitoring_state['last_status'] = False
        return False

def restart_mistral_api():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Mistral API"""
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏
    if (monitoring_state['last_restart_time'] and 
        (now - monitoring_state['last_restart_time']).total_seconds() < RESTART_COOLDOWN):
        logger.warning("–†–µ—Å—Ç–∞—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å
    today = now.strftime('%Y-%m-%d')
    restarts_today = sum(1 for date in monitoring_state['restart_dates'] if date.startswith(today))
    
    if restarts_today >= MAX_RESTARTS_PER_DAY:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({MAX_RESTARTS_PER_DAY})")
        message = (f"‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤*\n"
                  f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {MAX_RESTARTS_PER_DAY} —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è Mistral API.\n"
                  f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
        send_telegram_notification(message)
        return False
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        message = (f"üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Mistral API*\n"
                  f"–ü—Ä–∏—á–∏–Ω–∞: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω {monitoring_state['consecutive_failures']} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥\n"
                  f"–°–µ—Ä–≤–µ—Ä: {MISTRAL_API_URL}")
        send_telegram_notification(message)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Mistral API —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ {RESTART_SCRIPT}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        result = subprocess.run(
            ['bash', RESTART_SCRIPT], 
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            logger.info(f"–†–µ—Å—Ç–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.stdout}")
            monitoring_state['last_restart_time'] = now
            monitoring_state['restart_count'] += 1
            monitoring_state['restart_dates'].append(now.strftime('%Y-%m-%d %H:%M:%S'))
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ: {result.stderr}")
            message = (f"‚ùå *–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Mistral API*\n"
                      f"–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:\n"
                      f"```\n{result.stderr}\n```")
            send_telegram_notification(message)
            return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ Mistral API: {e}")
        message = (f"‚ùå *–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Mistral API*\n"
                  f"–û—à–∏–±–∫–∞: {str(e)}")
        send_telegram_notification(message)
        return False

def save_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª"""
    state_to_save = monitoring_state.copy()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if state_to_save['last_restart_time']:
        state_to_save['last_restart_time'] = state_to_save['last_restart_time'].strftime('%Y-%m-%d %H:%M:%S')
    
    try:
        with open(f'{log_dir}/monitoring_state.json', 'w') as f:
            json.dump(state_to_save, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(f'{log_dir}/monitoring_state.json'):
            with open(f'{log_dir}/monitoring_state.json', 'r') as f:
                loaded_state = json.load(f)
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            if loaded_state.get('last_restart_time'):
                loaded_state['last_restart_time'] = datetime.strptime(
                    loaded_state['last_restart_time'], '%Y-%m-%d %H:%M:%S'
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            monitoring_state.update(loaded_state)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ - {monitoring_state['restart_count']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    uptime_percentage = 0
    if monitoring_state['total_checks'] > 0:
        uptime_percentage = (monitoring_state['uptime_checks'] / monitoring_state['total_checks']) * 100
    
    report = (
        f"\n===== –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Mistral API =====\n"
        f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"API URL: {MISTRAL_API_URL}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {monitoring_state['total_checks']}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {monitoring_state['uptime_checks']}\n"
        f"–ê–ø—Ç–∞–π–º: {uptime_percentage:.1f}%\n"
        f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {monitoring_state['restart_count']}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {monitoring_state['last_restart_time'] or '–Ω–µ—Ç'}\n"
        f"========================================\n"
    )
    logger.info(report)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram
    now = datetime.now()
    if now.hour == 9 and now.minute < 5:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 9:00 —É—Ç—Ä–∞
        send_telegram_notification(f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç Mistral API*\n```\n{report}\n```")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Mistral API")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ –∞–¥—Ä–µ—Å—É: {MISTRAL_API_URL}")
    logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(RESTART_SCRIPT):
        restart_dir = os.path.dirname(RESTART_SCRIPT)
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        
        with open(RESTART_SCRIPT, 'w') as f:
            f.write("""#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Mistral API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SERVER_HOST="139.59.241.176"
SERVER_PORT="8080"
SERVER_USER="root"
SSH_KEY="${HOME}/.ssh/id_rsa"
RESTART_COMMAND="sudo systemctl restart mistral-api || ( pkill -f 'llama-server' && cd /opt/mistral && ./run_mistral_server.sh )"
CHECK_COMMAND="curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/v1/models"

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mistral API..."
status_code=$(curl -s -o /dev/null -w "%{http_code}" http://${SERVER_HOST}:${SERVER_PORT}/v1/models)

if [ "$status_code" = "200" ]; then
  echo "API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $status_code). –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
  exit 0
else
  echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $status_code)."
  echo "–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –µ–≥–æ."
  echo "–í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."
  exit 0  # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
fi
""")
        os.chmod(RESTART_SCRIPT, 0o755)
        logger.info(f"–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {RESTART_SCRIPT}")
        logger.warning("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç - —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SSH –∏ –∫–æ–º–∞–Ω–¥—ã.")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    load_state()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    message = (
        f"üöÄ *–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Mistral API –∑–∞–ø—É—â–µ–Ω*\n"
        f"URL API: `{MISTRAL_API_URL}`\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
        f"–ú–∞–∫—Å. —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å: {MAX_RESTARTS_PER_DAY}"
    )
    logger.info(message.replace('*', '').replace('`', ''))
    send_telegram_notification(message)

    last_report_time = datetime.now()
    
    while True:
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø–æ –∞–¥—Ä–µ—Å—É {MISTRAL_API_URL}")
            status = check_api_health()
            
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            if not status and monitoring_state['consecutive_failures'] >= RETRY_ATTEMPTS:
                restart_mistral_api()
                monitoring_state['consecutive_failures'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            save_state()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
            now = datetime.now()
            if (now - last_report_time).total_seconds() >= 3600:  # 1 —á–∞—Å
                generate_report()
                last_report_time = now
            
            time.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            break
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(CHECK_INTERVAL)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    logger.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main() 