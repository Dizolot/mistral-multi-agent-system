{
  "timestamp": "20250312_132753",
  "total_tests": 2,
  "successful_tests": 2,
  "failed_tests": 0,
  "total_execution_time": 1.2027430534362793,
  "results": [
    {
      "test_name": "test_memory_performance.py",
      "status": "\u0423\u0421\u041f\u0415\u0428\u041d\u041e",
      "success": true,
      "execution_time": 0.6944770812988281,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.11, pytest-7.4.3, pluggy-1.5.0 -- /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system\nplugins: anyio-3.7.1, langsmith-0.3.13\ncollecting ... collected 4 items\n\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_buffer_memory_add_performance FAILED [ 25%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_summary_memory_summarization_performance FAILED [ 50%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_manager_context_retrieval_performance PASSED [ 75%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_persistence_performance FAILED [100%]\n\n=================================== FAILURES ===================================\n___________ TestMemoryPerformance.test_buffer_memory_add_performance ___________\n\nself = <test_memory_performance.TestMemoryPerformance object at 0x10621fc50>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmp9wya5u72'\n\n    def test_buffer_memory_add_performance(self, temp_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0431\u0443\u0444\u0435\u0440\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c.\"\"\"\n>       buffer_memory = BufferMemory(\n            max_messages=1000,\n            storage_path=os.path.join(temp_dir, \"buffer_perf.json\")\n        )\nE       TypeError: BufferMemory.__init__() missing 1 required positional argument: 'memory_id'\n\ntests/performance/memory_system/test_memory_performance.py:41: TypeError\n_____ TestMemoryPerformance.test_summary_memory_summarization_performance ______\n\nself = <test_memory_performance.TestMemoryPerformance object at 0x10621fe90>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmpwokxbxb8'\n\n    def test_summary_memory_summarization_performance(self, temp_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 SummaryMemory.\"\"\"\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0442\u043e\u0440\n        summarizer = create_simple_summarizer()\n    \n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c \u0441 \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439\n>       summary_memory = SummaryMemory(\n            summarizer=summarizer,\n            summarize_threshold=10,\n            storage_path=os.path.join(temp_dir, \"summary_perf.json\")\n        )\nE       TypeError: SummaryMemory.__init__() missing 1 required positional argument: 'memory_id'\n\ntests/performance/memory_system/test_memory_performance.py:77: TypeError\n__________ TestMemoryPerformance.test_memory_persistence_performance ___________\n\nself = <test_memory_performance.TestMemoryPerformance object at 0x10791c210>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmpv4a1ka99'\n\n    def test_memory_persistence_performance(self, temp_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.\"\"\"\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438\n        storage_dir = os.path.join(temp_dir, \"persistence_perf\")\n        memory_manager = MemoryManager(\n            storage_dir=storage_dir,\n            summarizer=create_simple_summarizer(),\n            default_summarize_threshold=10\n        )\n    \n        # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        num_users = 5\n        messages_per_user = 30\n    \n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n        for user_idx in range(num_users):\n            user_id = f\"user{user_idx}\"\n            for msg_idx in range(messages_per_user):\n                memory_manager.add_user_message(\n                    user_id,\n                    f\"\u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id} \u043d\u043e\u043c\u0435\u0440 {msg_idx}. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043c\u0435 {msg_idx % 5}.\"\n                )\n                memory_manager.add_assistant_message(\n                    user_id,\n                    f\"\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id} \u043d\u043e\u043c\u0435\u0440 {msg_idx}. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0435\u043c\u0435 {msg_idx % 5}.\",\n                    agent_id=f\"agent{msg_idx % 3}\"\n                )\n    \n        # \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n        start_time = time.time()\n        memory_manager.save_all()\n        save_time = time.time() - start_time\n    \n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n        start_time = time.time()\n        new_memory_manager = MemoryManager(\n            storage_dir=storage_dir,\n            summarizer=create_simple_summarizer()\n        )\n        load_time = time.time() - start_time\n    \n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\n        for user_idx in range(num_users):\n            user_id = f\"user{user_idx}\"\n            history = new_memory_manager.get_chat_history(user_id)\n>           assert len(history) == messages_per_user * 2  # \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f + \u043e\u0442\u0432\u0435\u0442\u044b\nE           assert 50 == (30 * 2)\nE            +  where 50 = len([<src.core.memory_system.memory_base.Message object at 0x107935b10>, <src.core.memory_system.memory_base.Message object at 0x107929910>, <src.core.memory_system.memory_base.Message object at 0x10792ac10>, <src.core.memory_system.memory_base.Message object at 0x10792b8d0>, <src.core.memory_system.memory_base.Message object at 0x107929190>, <src.core.memory_system.memory_base.Message object at 0x107929790>, ...])\n\ntests/performance/memory_system/test_memory_performance.py:211: AssertionError\n=========================== short test summary info ============================\nFAILED tests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_buffer_memory_add_performance\nFAILED tests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_summary_memory_summarization_performance\nFAILED tests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_persistence_performance\n========================= 3 failed, 1 passed in 0.07s ==========================\n",
      "stderr": "",
      "return_code": 0
    },
    {
      "test_name": "test_memory_agent_performance.py",
      "status": "\u0423\u0421\u041f\u0415\u0428\u041d\u041e",
      "success": true,
      "execution_time": 0.5082659721374512,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.11, pytest-7.4.3, pluggy-1.5.0 -- /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system\nplugins: anyio-3.7.1, langsmith-0.3.13\ncollecting ... collected 2 items\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_conversation_performance ERROR [ 50%]\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_scaling_performance ERROR [100%]\n\n==================================== ERRORS ====================================\n_ ERROR at setup of TestMemoryAgentPerformance.test_memory_agent_conversation_performance _\n\nself = <test_memory_agent_performance.TestMemoryAgentPerformance object at 0x103077710>\n\n    @pytest.fixture\n    def mock_agent(self):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0443 \u0430\u0433\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\"\"\"\n>       agent = GeneralAgent(\n            agent_id=\"test_agent\",\n            name=\"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0430\u0433\u0435\u043d\u0442\",\n            description=\"\u0410\u0433\u0435\u043d\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\"\n        )\nE       TypeError: GeneralAgent.__init__() got an unexpected keyword argument 'agent_id'\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:117: TypeError\n_ ERROR at setup of TestMemoryAgentPerformance.test_memory_agent_scaling_performance _\n\nself = <test_memory_agent_performance.TestMemoryAgentPerformance object at 0x103d4d810>\n\n    @pytest.fixture\n    def mock_agent(self):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0443 \u0430\u0433\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\"\"\"\n>       agent = GeneralAgent(\n            agent_id=\"test_agent\",\n            name=\"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0430\u0433\u0435\u043d\u0442\",\n            description=\"\u0410\u0433\u0435\u043d\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\"\n        )\nE       TypeError: GeneralAgent.__init__() got an unexpected keyword argument 'agent_id'\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:117: TypeError\n=========================== short test summary info ============================\nERROR tests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_conversation_performance\nERROR tests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_scaling_performance\n============================== 2 errors in 0.05s ===============================\n",
      "stderr": "",
      "return_code": 0
    }
  ]
}