{
  "timestamp": "20250313_005549",
  "total_tests": 2,
  "successful_tests": 2,
  "failed_tests": 0,
  "total_execution_time": 8.178950309753418,
  "results": [
    {
      "test_name": "test_memory_performance.py",
      "status": "\u0423\u0421\u041f\u0415\u0428\u041d\u041e",
      "success": true,
      "execution_time": 2.5792362689971924,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.11, pytest-8.3.5, pluggy-1.5.0 -- /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system\nplugins: cov-6.0.0, asyncio-0.25.3, anyio-3.7.1, langsmith-0.3.13, mock-3.14.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None\ncollecting ... collected 4 items\n\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_buffer_memory_add_performance PASSED [ 25%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_summary_memory_summarization_performance PASSED [ 50%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_manager_context_retrieval_performance FAILED [ 75%]\ntests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_persistence_performance FAILED [100%]\n\n=================================== FAILURES ===================================\n___ TestMemoryPerformance.test_memory_manager_context_retrieval_performance ____\n\nself = <test_memory_performance.TestMemoryPerformance object at 0x1096bc1d0>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmpxp5qgkem'\n\n    def test_memory_manager_context_retrieval_performance(self, temp_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u0437 MemoryManager.\"\"\"\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438\n        memory_manager = MemoryManager(\n            storage_dir=os.path.join(temp_dir, \"manager_perf\"),\n            summarizer=create_keyword_summarizer(),\n            default_summarize_threshold=5\n        )\n    \n        # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        num_users = 10\n        messages_per_user = 20\n    \n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n        for user_idx in range(num_users):\n            user_id = f\"user{user_idx}\"\n            for msg_idx in range(messages_per_user):\n>               memory_manager.add_user_message(\n                    user_id,\n                    f\"\u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id} \u043d\u043e\u043c\u0435\u0440 {msg_idx}. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043c\u0435 {msg_idx % 5}.\"\n                )\n\ntests/performance/memory_system/test_memory_performance.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/core/memory_system/memory_manager.py:242: in add_user_message\n    long_term_memory = self.get_long_term_memory(user_id)\nsrc/core/memory_system/memory_manager.py:184: in get_long_term_memory\n    self.embedding_provider = MistralEmbeddingProvider()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.core.memory_system.embedding_provider.LocalMistralEmbeddingProvider object at 0x10958bb50>\nmodel_name = 'mistral-embed', server_url = None, batch_size = 10\n\n    def __init__(\n        self,\n        model_name: str = \"mistral-embed\",\n        server_url: Optional[str] = None,\n        batch_size: int = 10\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Mistral.\n    \n        Args:\n            model_name: \u0418\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n            server_url: URL \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e (\u0435\u0441\u043b\u0438 None, \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f)\n            batch_size: \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        \"\"\"\n        super().__init__(model_name)\n    \n        # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\n        if server_url is None:\n            server_url = os.environ.get(\"MISTRAL_SERVER_URL\")\n            if server_url is None:\n>               raise ValueError(\"URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\")\nE               ValueError: URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\nsrc/core/memory_system/embedding_provider.py:108: ValueError\n__________ TestMemoryPerformance.test_memory_persistence_performance ___________\n\nself = <test_memory_performance.TestMemoryPerformance object at 0x1096bc910>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmp73y0uq0q'\n\n    def test_memory_persistence_performance(self, temp_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.\"\"\"\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438\n        storage_dir = os.path.join(temp_dir, \"persistence_perf\")\n        memory_manager = MemoryManager(\n            storage_dir=storage_dir,\n            summarizer=create_simple_summarizer(),\n            default_summarize_threshold=10\n        )\n    \n        # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        num_users = 5\n        messages_per_user = 30\n    \n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n        for user_idx in range(num_users):\n            user_id = f\"user{user_idx}\"\n            for msg_idx in range(messages_per_user):\n>               memory_manager.add_user_message(\n                    user_id,\n                    f\"\u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id} \u043d\u043e\u043c\u0435\u0440 {msg_idx}. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043c\u0435 {msg_idx % 5}.\"\n                )\n\ntests/performance/memory_system/test_memory_performance.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/core/memory_system/memory_manager.py:242: in add_user_message\n    long_term_memory = self.get_long_term_memory(user_id)\nsrc/core/memory_system/memory_manager.py:184: in get_long_term_memory\n    self.embedding_provider = MistralEmbeddingProvider()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.core.memory_system.embedding_provider.LocalMistralEmbeddingProvider object at 0x109795b90>\nmodel_name = 'mistral-embed', server_url = None, batch_size = 10\n\n    def __init__(\n        self,\n        model_name: str = \"mistral-embed\",\n        server_url: Optional[str] = None,\n        batch_size: int = 10\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Mistral.\n    \n        Args:\n            model_name: \u0418\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n            server_url: URL \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e (\u0435\u0441\u043b\u0438 None, \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f)\n            batch_size: \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        \"\"\"\n        super().__init__(model_name)\n    \n        # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\n        if server_url is None:\n            server_url = os.environ.get(\"MISTRAL_SERVER_URL\")\n            if server_url is None:\n>               raise ValueError(\"URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\")\nE               ValueError: URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\nsrc/core/memory_system/embedding_provider.py:108: ValueError\n=========================== short test summary info ============================\nFAILED tests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_manager_context_retrieval_performance\nFAILED tests/performance/memory_system/test_memory_performance.py::TestMemoryPerformance::test_memory_persistence_performance\n========================= 2 failed, 2 passed in 0.10s ==========================\n",
      "stderr": "/Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/lib/python3.11/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "return_code": 0
    },
    {
      "test_name": "test_memory_agent_performance.py",
      "status": "\u0423\u0421\u041f\u0415\u0428\u041d\u041e",
      "success": true,
      "execution_time": 5.599714040756226,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.11, pytest-8.3.5, pluggy-1.5.0 -- /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system\nplugins: cov-6.0.0, asyncio-0.25.3, anyio-3.7.1, langsmith-0.3.13, mock-3.14.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None\ncollecting ... collected 2 items\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_conversation_performance FAILED [ 50%]\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_scaling_performance FAILED [100%]\n\n=================================== FAILURES ===================================\n____ TestMemoryAgentPerformance.test_memory_agent_conversation_performance _____\n\nself = <test_memory_agent_performance.TestMemoryAgentPerformance object at 0x1054e6250>\nmemory_enabled_agent_manager = <test_memory_agent_performance.MemoryEnabledAgentManager object at 0x105543690>\nresults_dir = '/Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/tests/performance/memory_system/results'\n\n    def test_memory_agent_conversation_performance(self, memory_enabled_agent_manager, results_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438.\"\"\"\n        user_id = \"perf_test_user\"\n    \n        # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0438\u0430\u043b\u043e\u0433\u0430\n        conversation = [\n            \"\u041f\u0440\u0438\u0432\u0435\u0442! \u042f \u0445\u043e\u0447\u0443 \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043f\u0430\u043c\u044f\u0442\u0438.\",\n            \"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044f?\",\n            \"\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0434\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430?\",\n            \"\u041a\u0430\u043a \u044d\u0442\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438?\",\n            \"\u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438?\",\n            \"\u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439?\",\n            \"\u0415\u0441\u0442\u044c \u043b\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u044a\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445?\",\n            \"\u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435?\",\n            \"\u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0440\u043e\u043a \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438?\",\n            \"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e!\"\n        ]\n    \n        process = psutil.Process(os.getpid())\n        start_memory = process.memory_info().rss / 1024 / 1024  # \u0432 \u041c\u0411\n    \n        # \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0439 \u0431\u0435\u0441\u0435\u0434\u044b\n        total_time_start = time.time()\n    \n        # \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n        message_times = []\n    \n        for message in conversation:\n            message_start = time.time()\n>           result = memory_enabled_agent_manager.process_query(message, user_id)\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:55: in process_query\n    self.memory_manager.add_user_message(user_id, query)\nsrc/core/memory_system/memory_manager.py:242: in add_user_message\n    long_term_memory = self.get_long_term_memory(user_id)\nsrc/core/memory_system/memory_manager.py:184: in get_long_term_memory\n    self.embedding_provider = MistralEmbeddingProvider()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.core.memory_system.embedding_provider.LocalMistralEmbeddingProvider object at 0x105543b50>\nmodel_name = 'mistral-embed', server_url = None, batch_size = 10\n\n    def __init__(\n        self,\n        model_name: str = \"mistral-embed\",\n        server_url: Optional[str] = None,\n        batch_size: int = 10\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Mistral.\n    \n        Args:\n            model_name: \u0418\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n            server_url: URL \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e (\u0435\u0441\u043b\u0438 None, \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f)\n            batch_size: \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        \"\"\"\n        super().__init__(model_name)\n    \n        # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\n        if server_url is None:\n            server_url = os.environ.get(\"MISTRAL_SERVER_URL\")\n            if server_url is None:\n>               raise ValueError(\"URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\")\nE               ValueError: URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\nsrc/core/memory_system/embedding_provider.py:108: ValueError\n_______ TestMemoryAgentPerformance.test_memory_agent_scaling_performance _______\n\nself = <test_memory_agent_performance.TestMemoryAgentPerformance object at 0x104284d10>\ntemp_dir = '/var/folders/n0/mfpb2q2x6cqc54xdp7hld46r0000gn/T/tmpdaqlgh2x'\nmock_agent = <MagicMock spec='GeneralAgent' id='4405832720'>\nresults_dir = '/Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/tests/performance/memory_system/results'\n\n    def test_memory_agent_scaling_performance(self, temp_dir, mock_agent, results_dir):\n        \"\"\"\u0422\u0435\u0441\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0430\u0433\u0435\u043d\u0442\u043e\u0432.\"\"\"\n        # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430\n        num_users = 5\n        messages_per_user = [5, 10, 20, 30, 50]\n    \n        scaling_results = []\n    \n        for msgs_count in messages_per_user:\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430\n            memory_manager = MemoryManager(\n                storage_dir=os.path.join(temp_dir, f\"scaling_perf_{msgs_count}\"),\n                summarizer=create_simple_summarizer(),\n                default_summarize_threshold=5\n            )\n    \n            agent_manager = AgentManager()\n            agent_manager.register_agent(mock_agent)\n            agent_manager.default_agent_id = mock_agent.agent_id\n    \n            mem_agent_manager = MemoryEnabledAgentManager(memory_manager, agent_manager)\n    \n            process = psutil.Process(os.getpid())\n            start_memory = process.memory_info().rss / 1024 / 1024\n    \n            # \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n            start_time = time.time()\n    \n            for user_idx in range(num_users):\n                user_id = f\"scale_user_{user_idx}\"\n    \n                for msg_idx in range(msgs_count):\n                    query = f\"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 {msg_idx} \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id}\"\n>                   mem_agent_manager.process_query(query, user_id)\n\ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/performance/memory_system/benchmarks/test_memory_agent_performance.py:55: in process_query\n    self.memory_manager.add_user_message(user_id, query)\nsrc/core/memory_system/memory_manager.py:242: in add_user_message\n    long_term_memory = self.get_long_term_memory(user_id)\nsrc/core/memory_system/memory_manager.py:184: in get_long_term_memory\n    self.embedding_provider = MistralEmbeddingProvider()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.core.memory_system.embedding_provider.LocalMistralEmbeddingProvider object at 0x1069bbd50>\nmodel_name = 'mistral-embed', server_url = None, batch_size = 10\n\n    def __init__(\n        self,\n        model_name: str = \"mistral-embed\",\n        server_url: Optional[str] = None,\n        batch_size: int = 10\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Mistral.\n    \n        Args:\n            model_name: \u0418\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n            server_url: URL \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e (\u0435\u0441\u043b\u0438 None, \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f)\n            batch_size: \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        \"\"\"\n        super().__init__(model_name)\n    \n        # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\n        if server_url is None:\n            server_url = os.environ.get(\"MISTRAL_SERVER_URL\")\n            if server_url is None:\n>               raise ValueError(\"URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\")\nE               ValueError: URL \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Mistral \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\nsrc/core/memory_system/embedding_provider.py:108: ValueError\n=========================== short test summary info ============================\nFAILED tests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_conversation_performance\nFAILED tests/performance/memory_system/benchmarks/test_memory_agent_performance.py::TestMemoryAgentPerformance::test_memory_agent_scaling_performance\n============================== 2 failed in 0.77s ===============================\n",
      "stderr": "/Users/dimitrizolot/Desktop/Co-Founder/mistral-multi-agent-system/venv/lib/python3.11/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "return_code": 0
    }
  ]
}